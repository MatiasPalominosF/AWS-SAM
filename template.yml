AWSTemplateFormatVersion: 2010-09-09
Description: Technical Challenge Defontana Ingeniero Serverless AWS Junior
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  UserPoolName:
    Type: String
    Default: MyUserPool
    Description: The user pool name
  UserPoolClientName:
    Type: String
    Default: MyUserPoolClient
    Description: The user pool client name
  AppSyncApiName:
    Type: String
    Default: MyGraphQLApi
    Description: The GraphQL Api name
  DynamoDBName:
    Type: String
    Default: MyDBPet
    Description: The DynamoDB Name

Resources:
  #Begin comments for AppSync, DynamoDB and API Gateway.
  #DynamoDB Config
  MyDBPet:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBName
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  #Policies for DynamoDB
  PolicyDynamoDB:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /service-role/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:DeleteItem
          Resource:
          - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MyDBPet}
  #Role for DynamoDB
  RoleAppSyncDynamoDB:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - !Ref PolicyDynamoDB
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - appsync.amazonaws.com
  #Role for AppSyncCloudWatch
  RoleAppSyncCloudWatch:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - appsync.amazonaws.com
  #End comments for AppSync, DynamoDB and API Gateway.
  #Begin comments for API with Cognito Authentication.
  #Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UserPoolName
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UsernameConfiguration:
        CaseSensitive: false
      UsernameAttributes:
      - email
      AutoVerifiedAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Ref UserPoolClientName
      GenerateSecret: false
      RefreshTokenValidity: 30
  #End comments for API with Cognito Authentication.
  #AppSync Api With Auth Cognito.
  GraphqlApi:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./graphql/template.yml
      Parameters:
        AppSyncApiName: !Ref AppSyncApiName
        UserPoolId: !Ref UserPool
  #AppSync Api with API Gateway
  GraphqlApi2:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./graphql/template2.yml
      Parameters:
        ArnRoleAppSyncCloudWatch: !GetAtt RoleAppSyncCloudWatch.Arn
        ArnRoleAppSyncDynamoDB: !GetAtt RoleAppSyncDynamoDB.Arn

Outputs:
  UserPoolId:
    Description: "The id for the user pool"
    Value: !Ref UserPool
